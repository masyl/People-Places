/*

NOW DOING:
	- Create a utility class to get object by ref from inventory... and with friendly error handling
	- Rename the "stadium" set to "demo"
	+ New ModelCollection class for simpler loading of typed object collections
	+ Better class modeling for model objects
	+ Serialization pattern across all model objects
	+ New global object inventory on world object
	+ Class for icons
	+ Macro execution system
	+ Focus and blur event handling on views, with a focus stack
1	- Automaticly resume a game if it was still "playing" ... but dont if the user has quit
	- Unload a game if you quit
	- Only show resume if there is a game to resume
	- Obtain a soda can from looking into the garbage can in the locker
		+ Unhook action arrow after running a macro
		+ Friendly popup for showing message to user (Icon, title, message, ok button with custom prompt)
		+ View for inventory list
		+ View for inventory Items (using notification view)
		+ Show tooltip when hovering inventory items
2		- Inventory Item class with persistance for each character
		- Discard artefact from inventory list by
		- Play sound effect on "obtainItem"
		- Play sound effect when closing notification notification panel
		- Items with 2 to X quantity
		- Artefact specific message when quantity limit is obtained
		- Depletable object sources... or link findObject macro to a statefull counter
		- Ability to put back items into a location

	- bug: muted button from welcome screen and inGame dont follow same state

P&P ROADMAP

v0.2 - Goal: First game mechanics
	- Timeline Variables (Ex.: Bathroom light is off, lever is pulled)
	- Collect Things (Artefacts... similar to SCUM games)
		- Objects (picked up or received)
		- Knowledge (Learned, Notes picked up, received)
		- Conditions/State (Illness, Invulnerability)
	- Actions (Ex.: Wash your hands)
		- Gain/Discard artefact
		- Change game variable
		- Has a special popup/ui to show action details/impacts, storyline
	- Conditionnal logic, depending on Artefacts or Timeline Variables
		- Visibility of marks (or locked, barred)
		- Background used for a board
		- Presence of an object
		- Ability to pickup an object
		- Ability to do an action

v0.3 - Goal: Make it rewarding
	- Achievements (obtained upon conditions)
	- Popup for gratifications (objects, etc)
	- Ability to discover, accept and conclude achievements/missions

v0.4 - Goal: Make it playable
	- Create a few scenarions with real achievement and a small storyline
	- Fake NPC interactions with actions and timeline variables

v0.5 - Goal: Make it smooth
	- If from one board to the other, it is the same soundtrack, dont stop and start it
	- When quiting, unload the current game
	- Smooth Fade in and fade out between board transitions
	- No flickering or half display layout when loading the game
	- Action Arrows should be fade-in and fade-ou instead of animated
	- Sound-tracks should fade-out instead of cutting clean
	- MouseOver states for mute and pause icons

v0.6 - Goal: Make it solid (find and fix all bugs)
	- FINISH REFACTORING ALL PaperObject CLASSES
		background
		marks
	- Bug: Must load player and game state independently
	- Bug: if muted is pressed on welcome screen, state is lost
	- Rafactor: iOS detection (Modernizr?)

v0.7 - Make it publishable
	- Icon and Load screen for iOS
	- Game Player UI
		- Show Current Character with its icon
		- Start New game with Character Selection
	- Continue game (game list showing basic state)
		- High res icons characters
		- High res icons for boards
	- Rename all code/documentation to P&P instead of PocketPeople

v0.8
	- Better support for Aerial or Satelite boards
	- Better support for "First Person" boards with sample (sink counter in bathroom, with soap)

v0.9
	- NPCs and Dialogs
		- Darken/HIghligh when clicking on the board background or when having dialogs
			(this also shows more UI.. character, mark titles, board title, stats, time...)


		"allerDinerAvecRemi": {
			"title": "Choisir ou aller diner avec Rémi",
			"character": "character:remi@stadium",
			"first": "hey",
			"statements": {
				"hey": {
					"text": "Hey.. yé 11h45! Lunch time?",
					"replies": {
						"onVaDinerOu?": {
							"text": "Ok, on va diner où ?",
							"next": {
								"statement": "onVaMangerOu?"
							}
						}
					}
				},
				"onVaMangerOu?": {
					"text": "On pourrait aller manger chez Luigi, mais il faudrait se dépêcher... sinon il restera plus de place et on va devoir se contenter du Méga-Bytes.",
					"replies": {
						"laisseFaire": {
							"text": "Ho, laisse faire alors... je dois attendre Billy, on va se contenter d’aller chercher du take-out au Café Pasta.",
							"next": {
								"statement": "aTantotAlors"
							}
						},
						"dac": {
							"text": "Dac... allons y tout de suite.",
							"next": {
								"macro": "macro:goingOutToLunchWithRemi@stadium"
							}
						},
						"attend": {
							"text": "Attend je vais demander à Billy.",
							"next": {
								"statement": "okJeTAttend"
							}
						}
					}
				},
				"okJeTAttend" : {
					"text": "Ok... je t'attend.",
					"next": {
						"stop": true
					}
				},
				"aTantotAlors" : {
					"text": "Dac, à tantot alors.",
					"next": {
						"macro": "macro:remiGoesOutToLunchAlone@stadium"
					}
				}
			}
		}