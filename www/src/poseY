/*

todo:
- instantiate boads collections
- instantiate marks collections

refatoring:
- path object should be a class

 */

(function($){



	var PocketPeople = {};
	this.PocketPeople = PocketPeople;

	var utils = PocketPeople.Utils = {};

	PocketPeople.Utils.Location = new JS.Class({
		world: null,
		path: "",
		setId: "",
		boardId: "",
		markID: "",
		set: null,
		board: null,
		mark: null,
		initialize: function (path, world) {
			var split1, split2;

			split1 = path.split("/");
			split2 = split1[1].split("#");

			this.worldId = world.id;
			this.setId = split1[0];
			this.boardId = split2[0];
			this.markId = split2[1];

			this.path = path;
			this.world = world;
			this.set = world.sets.get(this.setId);
			this.board = world.boards.get(this.boardId);
			this.mark = world.marks.get(this.markId);

			// todo: get reference to the set, board and mark objects
		},
		title: function() {
			return this.board.title;
		}
	});

	PocketPeople.World = new JS.Class({
		settings: {},
		id: null,
		title: "",
		seed: "",
		defaultStartPath: "",
		sets: new JS.Hash(),
		boards: new JS.Hash(),
		marks: new JS.Hash(),
		characters: new JS.Hash(),
		initialize: function (settings) {
			$.extend(this.settings, settings);
			this.id = settings.id;
			this.title = settings.title;
			this.seed = settings.seed;
			this.defaultStartPath = settings.defaultStartPath;
		}
	});

	PocketPeople.Set = new JS.Class({
		settings: {},
		id: null,
		title: "",
		seed: "",
		boards: null,
		marks: null,
		characters: null,
		initialize: function (settings) {
			var self = this;
			this.boards = new JS.Hash();
			this.marks = new JS.Hash();
			this.characters = new JS.Hash();
			$.extend(this.settings, settings);
			this.id = settings.id;
			this.title = settings.title;
			this.seed = settings.seed;
			$.each(this.settings.boards, function (id) {
				var board = new PocketPeople.Board(id, this);
				self.boards.store(board.id, board);
				self.marks.update(board.marks);

			});
			$.each(this.settings.characters, function (id) {
				var character = new PocketPeople.Character(id, this);
				self.characters.store(character.id, character);
			});
		}
	});

	PocketPeople.Board = new JS.Class({
		settings: {},
		id: null,
		title: "",
		marks: null,
		backgroundImage: "",
		initialize: function (id, settings) {
			var self = this;
			this.marks = new JS.Hash();
			$.extend(this.settings, settings);
			this.id = id;
			this.title = settings.title;
			this.backgroundImage = settings.backgroundImage;
			console.log(id);
			$.each(this.settings.marks, function (markId) {
				var mark = new PocketPeople.Mark(markId, this);
				self.marks.store(markId, mark);
				console.log(self.marks.size, id, markId, mark, self.marks);
			});
		}
	});

	PocketPeople.Mark = new JS.Class({
		settings: {},
		id: null,
		title: "",
		type: "",
		x: 0,
		y: 0,
		z: 0,
		poseX: 0,
		characterY: 0,
		characterZ: 0,
		destination: "",
		initialize: function (id, settings) {
			$.extend(this.settings, settings);
			this.id = id;
			this.title = settings.title;
			this.type = settings.type;
			this.x = settings.x;
			this.y = settings.y;
			this.z = settings.z;
			this.poseX = settings.poseX;
			this.characterY = settings.characterY;
			this.characterZ = settings.characterZ;
			this.destination = settings.destination;
		}
	});

	PocketPeople.Object = new JS.Class({
		settings: {},
		id: null,
		title: "",
		initialize: function(settings) {
			$.extend(this.settings, settings);
			this.id = settings.id;
			this.title = settings.title;
		}
	});


	PocketPeople.Character = new JS.Class({
		settings: {},
		id: null,
		name: "",
		fullname: "",
		poses: null,
		initialize: function (id, settings) {
			var self = this;
			this.poses = new JS.Hash();
			$.extend(this.settings, settings);
			this.id = id;
			this.name = settings.name;
			this.fullname = settings.fullname;
			$.each(this.settings.poses, function (poseId) {
				var pose = new PocketPeople.Pose(poseId, this);
				self.poses.store(poseId, pose);
			});
		}
	});

	PocketPeople.Pose = new JS.Class({
		settings: {},
		id: null,
		image: "",
		initialize: function (id, settings) {
			$.extend(this.settings, settings);
			this.id = id;
			this.image = settings.image;
		}
	});

})(jQuery);